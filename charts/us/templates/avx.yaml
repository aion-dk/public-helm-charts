---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: avx-sa
  namespace: "{{ .Release.Name }}"
secrets:
- name: avx-sa
---
apiVersion: v1
kind: Secret
metadata:
  name: avx-sa
  namespace: "{{ .Release.Name }}"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: avx
  name: avx
  namespace: "{{ .Release.Name }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: avx
  strategy: {}
  template:
    metadata:
      labels:
        app: avx
    spec:
      serviceAccountName: avx-sa
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: avx
        image: "{{ .Values.avx.image.repository }}:{{ .Values.avx.image.tag }}"
        imagePullPolicy: Always
        command: ["bin/docker-entrypoint"]
        args: ["bundle", "exec", "rails", "s", "-b", "0.0.0.0"]
        ports:
        - protocol: TCP
          containerPort: 3000
        volumeMounts:
        - mountPath: /usr/src/app/public/uploads/
          name: uploads
        - mountPath: /usr/src/app/public/packs/
          name: packs
        env:
        - name: RAILS_ENV
          value: development
        - name: SKIP_TEST_DATABASE
          value: "true"
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              key: host
              name: "{{ .Values.databaseCredentials.avx }}"
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              key: port
              name: "{{ .Values.databaseCredentials.avx }}"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: "{{ .Values.databaseCredentials.avx }}"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "{{ .Values.databaseCredentials.avx }}"
        - name: SECRET_KEY_BASE
          {{- toYaml .Values.secretKeyBase | nindent 10 }}
        - name: AVX_SITE_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: private-key
              name: avx-site-private-key
        - name: DBB_URL
          value: "https://dbb.avx.{{ .Release.Name }}.assemblyvoting.net"
        - name: SVS_URL
          value: "http://svs-api:3020"
        - name: OTP_PROVIDER_URL
          value: "https://otp.avx.{{ .Release.Name }}.assemblyvoting.net"
        - name: VOTER_AUTHORIZER_URL
          value: "https://va.avx.{{ .Release.Name }}.assemblyvoting.net"
        - name: US_AVX_HOST
          value: "https://eo.avx.{{ .Release.Name }}.assemblyvoting.net"
        - name: LOCKBOX_MASTER_KEY
          value: "0000000000000000000000000000000000000000000000000000000000000000"
        - name: WEBPACK_PRECOMPILE
          value: "true"
        - name: ASSET_SERVER_URL
          value: "https://assets.demo.assembly-voting.com"
        - name: PROVISIONER_API_URL
          value: "{{ .Values.avx.provisioner.apiUrl }}"
        - name: PROVISIONER_UI_URL
          value:  "{{ .Values.avx.provisioner.uiUrl }}"
        resources:
          requests:
            cpu: 300m
            memory: 500Mi
          limits:
            cpu: 1000m
            memory: 2000Mi
      - name: avx-jobs
        image: "{{ .Values.avx.image.repository }}:{{ .Values.avx.image.tag }}"
        imagePullPolicy: Always
        command: ["bin/docker-entrypoint"]
        args: ["bundle", "exec", "rails", "jobs:work"]
        ports:
        - protocol: TCP
          containerPort: 3000
        volumeMounts:
        - mountPath: /usr/src/app/public/uploads/
          name: uploads
        - mountPath: /usr/src/app/public/packs/
          name: packs
        env:
        - name: RAILS_ENV
          value: development
        - name: SKIP_TEST_DATABASE
          value: "true"
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              key: host
              name: "{{ .Values.databaseCredentials.avx }}"
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              key: port
              name: "{{ .Values.databaseCredentials.avx }}"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: "{{ .Values.databaseCredentials.avx }}"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "{{ .Values.databaseCredentials.avx }}"
        - name: SECRET_KEY_BASE
          {{- toYaml .Values.secretKeyBase | nindent 10 }}
        - name: AVX_SITE_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: private-key
              name: avx-site-private-key
        - name: DBB_URL
          value: "https://dbb.avx.{{ .Release.Name }}.assemblyvoting.net"
        - name: SVS_URL
          value: "http://svs-api:3020"
        - name: OTP_PROVIDER_URL
          value: "https://otp.avx.{{ .Release.Name }}.assemblyvoting.net"
        - name: VOTER_AUTHORIZER_URL
          value: "https://va.avx.{{ .Release.Name }}.assemblyvoting.net"
        - name: US_AVX_HOST
          value: "https://eo.avx.{{ .Release.Name }}.assemblyvoting.net"
        - name: LOCKBOX_MASTER_KEY
          value: "0000000000000000000000000000000000000000000000000000000000000000"
        - name: WEBPACK_PRECOMPILE
          value: "true"
        - name: ASSET_SERVER_URL
          value: "https://assets.demo.assembly-voting.com"
        - name: PROVISIONER_API_URL
          value: "{{ .Values.avx.provisioner.apiUrl }}"
        - name: PROVISIONER_UI_URL
          value:  "{{ .Values.avx.provisioner.uiUrl }}"
        resources:
          requests:
            cpu: 100m
            memory: 500Mi
          limits:
            cpu: 1000m
            memory: 2000Mi
      volumes:
      - name: uploads
        {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: avx-public
        {{- else }}
        emptyDir:
          sizeLimit: {{ .Values.persistence.allocatedStorage }}
        {{- end }}
      - name: packs
        {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: avx-packs
        {{- else }}
        emptyDir:
          sizeLimit: {{ .Values.persistence.allocatedStorage }}
        {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: avx
  namespace: "{{ .Release.Name }}"
spec:
  selector:
    app: avx
  ports:
  - name: http
    port: 3000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-production
    external-dns.alpha.kubernetes.io/hostname: "avx.{{ .Release.Name }}.assemblyvoting.net"
  name: avx
  namespace: "{{ .Release.Name }}"
spec:
  ingressClassName: nginx
  rules:
  - host: "avx.{{ .Release.Name }}.assemblyvoting.net"
    http:
      paths:
      - backend:
          service:
            name: avx
            port:
              number: 3000
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - "avx.{{ .Release.Name }}.assemblyvoting.net"
    secretName: avx-service
{{- if .Values.persistence.enabled }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: avx-public
  namespace: "{{ .Release.Name }}"
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.persistence.allocatedStorage }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: avx-packs
  namespace: "{{ .Release.Name }}"
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.persistence.allocatedStorage }}
{{- end }}