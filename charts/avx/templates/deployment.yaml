apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- include "avx.labels" . | nindent 4 }}
  name: avx
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "avx.selectorLabels" . | nindent 6 }}
  strategy: {}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "avx.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      {{- if not .Values.global.init }}
      initContainers:
      - name: avx-migrate
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["bin/docker-entrypoint"]
        args: ["bundle exec rails db:migrate"]
        imagePullPolicy: Always
        volumeMounts:
        - mountPath: /usr/src/app/uploads/
          name: uploads
        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              key: host
              name: "{{ .Values.databaseCredentials.secret }}"
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              key: port
              name: "{{ .Values.databaseCredentials.secret }}"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: "{{ .Values.databaseCredentials.secret }}"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "{{ .Values.databaseCredentials.secret }}"
        - name: RAILS_ENV
          value: {{ .Values.global.environment }}
        - name: HOSTS
          value: "localhost,{{ include "avx.hostname" . }}"
        - name: LOCKBOX_MASTER_KEY
          valueFrom:
            secretKeyRef:
              key: lockboxMasterKey
              name: "{{ .Values.databaseCredentials.secret }}"
      {{- end }}
      containers:
      - name: avx
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["bin/docker-entrypoint"]
        args:
          - "bundle"
          - "exec"
          - "rails"
          - "s"
          - "-b"
          - "0.0.0.0"
          - "-p"
          - {{ .Values.rails.port | quote }}
        imagePullPolicy: Always
        ports:
          - name: http
            protocol: TCP
            containerPort: {{ .Values.rails.port }}
        {{- if not .Values.global.init }}
        livenessProbe:
          httpGet:
            path: /ping
            port: http
        readinessProbe:
          httpGet:
            path: /ping
            port: http
        {{- end }}
        volumeMounts:
        - mountPath: /usr/src/app/public/uploads/
          name: site-data
          subPath: uploads
        - mountPath: /usr/src/app/public/packs/
          name: site-data
          subPath: packs
        env:
        - name: RAILS_ENV
          value: {{ .Values.global.environment }}
        - name: HOSTS
          value: "localhost,{{ include "avx.hostname" . }}"
        - name: SKIP_TEST_DATABASE
          value: "true"
        - name: SECRET_KEY_BASE
          value: {{ .Values.secretKeyBase | quote }}
        - name: AVX_SITE_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: privateKey
              name: avx-site-private-key
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              key: host
              name: "{{ .Values.databaseCredentials.secret }}"
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              key: port
              name: "{{ .Values.databaseCredentials.secret }}"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: "{{ .Values.databaseCredentials.secret }}"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "{{ .Values.databaseCredentials.secret }}"
        - name: DBB_URL
          value: "https://dbb.{{ .Values.global.projectHostname }}"
        - name: SVS_URL
          value: https://svs.{{ .Values.global.projectHostname }}"
        - name: OTP_PROVIDER_URL
          value: "https://otp.{{ .Values.global.projectHostname }}"
        - name: VOTER_AUTHORIZER_URL
          value: "https://va.{{ .Values.global.projectHostname }}"
        - name: US_AVX_HOST
          value: "avx.{{ .Values.global.projectHostname }}"
        - name: LOCKBOX_MASTER_KEY
          valueFrom:
            secretKeyRef:
              key: lockboxMasterKey
              name: "{{ .Values.databaseCredentials.secret }}"
        - name: WEBPACK_PRECOMPILE
          value: "true"
        - name: ASSET_SERVER_URL
          value: {{ .Values.env.assetsServer }}
        - name: PROVISIONER_API_URL
          value: "null"
        - name: PROVISIONER_UI_URL
          value: "null"
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
      - name: avx-jobs
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["bin/docker-entrypoint"]
        args:
          - "bundle"
          - "exec"
          - "rails"
          - "jobs:work"
        imagePullPolicy: Always
        volumeMounts:
        - mountPath: /usr/src/app/public/uploads/
          name: site-data
          subPath: uploads
        - mountPath: /usr/src/app/public/packs/
          name: site-data
          subPath: packs
        env:
        - name: RAILS_ENV
          value: {{ .Values.global.environment }}
        - name: HOSTS
          value: "localhost,{{ include "avx.hostname" . }}"
        - name: SKIP_TEST_DATABASE
          value: "true"
        - name: SECRET_KEY_BASE
          value: {{ .Values.secretKeyBase | quote }}
        - name: AVX_SITE_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: privateKey
              name: avx-site-private-key
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              key: host
              name: "{{ .Values.databaseCredentials.secret }}"
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              key: port
              name: "{{ .Values.databaseCredentials.secret }}"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: "{{ .Values.databaseCredentials.secret }}"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "{{ .Values.databaseCredentials.secret }}"
        - name: DBB_URL
          value: "https://dbb.{{ .Values.global.projectHostname }}"
        - name: SVS_URL
          value: https://svs.{{ .Values.global.projectHostname }}"
        - name: OTP_PROVIDER_URL
          value: "https://otp.{{ .Values.global.projectHostname }}"
        - name: VOTER_AUTHORIZER_URL
          value: "https://va.{{ .Values.global.projectHostname }}"
        - name: US_AVX_HOST
          value: "https://avx.{{ .Values.global.projectHostname }}"
        - name: LOCKBOX_MASTER_KEY
          valueFrom:
            secretKeyRef:
              key: lockboxMasterKey
              name: "{{ .Values.databaseCredentials.secret }}"
        - name: WEBPACK_PRECOMPILE
          value: "true"
        - name: ASSET_SERVER_URL
          value: {{ .Values.env.assetsServer }}
        - name: PROVISIONER_API_URL
          value: "null"
        - name: PROVISIONER_UI_URL
          value: "null"
        resources:
          requests:
            cpu: 50m
            memory: 200Mi
          limits:
            cpu: 1000m
            memory: 500Mi
      volumes:
      - name: site-data
        {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: avx-data
        {{- else }}
        emptyDir:
          sizeLimit: {{ .Values.persistence.size }}
        {{- end }}